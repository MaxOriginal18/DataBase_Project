import os
import asyncio
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –ë–î
from db_async import init_db_pool, close_db_pool, fetch_avg_salary_6m, fetch_all_employees


# --- –ö–æ–º–∞–Ω–¥—ã –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –±–æ—Ç. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –±–∏–∑–Ω–µ—Å–µ üìä\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/salary_avg ‚Äî —Å—Ä–µ–¥–Ω—è—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å. \n"
        "/employees - —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"
    )

# –ö–æ–º–∞–Ω–¥–∞ /salary_avg (—Ä–∞–±–æ—Ç–∞ —Å –ë–î)
async def salary_avg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        avg = await fetch_avg_salary_6m()
        if avg is None:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã–ø–ª–∞—Ç–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤.")
        else:
            await update.message.reply_text(f"–°—Ä–µ–¥–Ω—è—è –≤—ã–ø–ª–∞—Ç–∞ –∑–∞ 6 –º–µ—Å.: {avg} (–†–£–ë.)")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /employee ‚Äî —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
async def employee_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        employees = await fetch_all_employees()
        if not employees:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö.")
            return

        text = "üë• –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n\n"
        for emp in employees:
            text += (
                f"ID: {emp['employee_id']}\n"
                f"–ò–º—è: {emp['first_name']} {emp['last_name']}\n"
                f"Email: {emp['email']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {emp['phone'] or '‚Äî'}\n"
                "------------------------\n"
            )

        await update.message.reply_text(text)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: {e}")

# –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    await update.message.reply_text(
        f"–¢—ã –Ω–∞–ø–∏—Å–∞–ª: {user_text}\n"
        "(–ø–æ–∑–∂–µ —è –Ω–∞—É—á—É—Å—å —Å–≤—è–∑—ã–≤–∞—Ç—å—Å—è —Å –ë–î –∏ RAG ü§ñ)"
    )

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def main():
    app = Application.builder().token(TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("salary_avg", salary_avg))
    app.add_handler(CommandHandler("employees", employee_list))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É–ª –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ
    loop = asyncio.get_event_loop()
    loop.run_until_complete(init_db_pool())

    try:
        app.run_polling()
    finally:
        loop.run_until_complete(close_db_pool())

if __name__ == "__main__":
    main()